{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\nfunction getData(num) {\n  var rows = [];\n\n  for (var i = 0; i < num; i += 1) {\n    var randomSelection = Math.floor(Math.random() * 10);\n    rows.push(createData(i, randomSelection));\n  }\n\n  return rows;\n}\n\nexport var tableSlice = createSlice({\n  name: 'tableData',\n  initialState: {\n    value: 0,\n    users: getData(200)\n  },\n  reducers: {\n    increment: function increment(state) {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: function decrement(state) {\n      state.value -= 1;\n    },\n    incrementByAmount: function incrementByAmount(state, action) {\n      state.value += action.payload;\n    }\n  }\n});\nvar _tableSlice$actions = tableSlice.actions,\n    increment = _tableSlice$actions.increment,\n    decrement = _tableSlice$actions.decrement,\n    incrementByAmount = _tableSlice$actions.incrementByAmount;\nexport { increment, decrement, incrementByAmount };\nexport var selectCount = function selectCount(state) {\n  return state.counter.value;\n};\nexport default tableSlice.reducer;","map":{"version":3,"sources":["/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/src/reducers/tableSlice.js"],"names":["createSlice","getData","num","rows","i","randomSelection","Math","floor","random","push","createData","tableSlice","name","initialState","value","users","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","selectCount","counter","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;;AAEA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,MAAMC,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,IAAI,CAA9B,EAAiC;AAC7B,QAAMC,eAAe,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAxB;AACAL,IAAAA,IAAI,CAACM,IAAL,CAAUC,UAAU,CAACN,CAAD,EAAIC,eAAJ,CAApB;AACH;;AACD,SAAOF,IAAP;AACD;;AAED,OAAO,IAAMQ,UAAU,GAAGX,WAAW,CAAC;AACpCY,EAAAA,IAAI,EAAE,WAD8B;AAEpCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,CADK;AAEZC,IAAAA,KAAK,EAAGd,OAAO,CAAC,GAAD;AAFH,GAFsB;AAMpCe,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,mBAAAC,KAAK,EAAI;AAClB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACJ,KAAN,IAAe,CAAf;AACD,KAPO;AAQRK,IAAAA,SAAS,EAAE,mBAAAD,KAAK,EAAI;AAClBA,MAAAA,KAAK,CAACJ,KAAN,IAAe,CAAf;AACD,KAVO;AAWRM,IAAAA,iBAAiB,EAAE,2BAACF,KAAD,EAAQG,MAAR,EAAmB;AACpCH,MAAAA,KAAK,CAACJ,KAAN,IAAeO,MAAM,CAACC,OAAtB;AACD;AAbO;AAN0B,CAAD,CAA9B;0BAuBoDX,UAAU,CAACY,O;IAAvDN,S,uBAAAA,S;IAAWE,S,uBAAAA,S;IAAWC,iB,uBAAAA,iB;;AAErC,OAAO,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAAAN,KAAK;AAAA,SAAIA,KAAK,CAACO,OAAN,CAAcX,KAAlB;AAAA,CAAzB;AACP,eAAeH,UAAU,CAACe,OAA1B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nfunction getData(num) {\n  const rows = [];\n  for (let i = 0; i < num; i += 1) {\n      const randomSelection = Math.floor(Math.random() * 10);\n      rows.push(createData(i, randomSelection));\n  }\n  return rows;\n}\n\nexport const tableSlice = createSlice({\n  name: 'tableData',\n  initialState: {\n    value: 0,\n    users : getData(200),\n  },\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: state => {\n      state.value -= 1\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload\n    }\n  }\n})\n\nexport const { increment, decrement, incrementByAmount } = tableSlice.actions;\n\nexport const selectCount = state => state.counter.value\nexport default tableSlice.reducer;"]},"metadata":{},"sourceType":"module"}