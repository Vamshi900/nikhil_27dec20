{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/src/Containers/CheckBoxContainer.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Checkbox from './newcheckbox';\nvar checkboxes = [{\n  name: 'Delhi',\n  key: 'Delhi',\n  label: 'Delhi'\n}, {\n  name: 'Mumbai',\n  key: 'Mumbai',\n  label: 'Mumbai'\n}, {\n  name: 'Banglore',\n  key: 'Banglore',\n  label: 'Banglore'\n}];\n\nvar CheckboxContainer = /*#__PURE__*/function (_React$Component) {\n  _inherits(CheckboxContainer, _React$Component);\n\n  var _super = _createSuper(CheckboxContainer);\n\n  function CheckboxContainer(props) {\n    var _this;\n\n    _classCallCheck(this, CheckboxContainer);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      checkedItems: new Map(),\n      location: ''\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CheckboxContainer, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      var item = e.target.name;\n      var isChecked = e.target.checked;\n      console.log(this.state);\n      var locations;\n      this.setState(function (prevState) {\n        locations = prevState.location;\n\n        if (isChecked) {\n          if (!locations.includes(item)) {\n            locations += locations === '' ? item : \",\".concat(item);\n          }\n        } else {\n          if (locations.includes(item)) {\n            var newLocations = '';\n\n            if (prevState.checkedItems.size > 0) {\n              var _iterator = _createForOfIteratorHelper(prevState.checkedItems.entries()),\n                  _step;\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var _step$value = _slicedToArray(_step.value, 2),\n                      key = _step$value[0],\n                      value = _step$value[1];\n\n                  if (value && newLocations === '' && key !== item) {\n                    newLocations += key;\n                  } else if (value) {\n                    newLocations += key === item ? '' : \",\".concat(key);\n                  }\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            }\n\n            locations = newLocations;\n          }\n        }\n\n        console.log(locations);\n        return {\n          checkedItems: prevState.checkedItems.set(item, isChecked),\n          location: locations\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: checkboxes.map(function (item) {\n          return /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [item.name, /*#__PURE__*/_jsxDEV(Checkbox, {\n              name: item.name,\n              checked: _this2.state.checkedItems.get(item.name),\n              onChange: _this2.handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 29\n            }, _this2)]\n          }, item.key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, _this2);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return CheckboxContainer;\n}(React.Component);\n\nexport default CheckboxContainer;","map":{"version":3,"sources":["/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/src/Containers/CheckBoxContainer.js"],"names":["React","PropTypes","Checkbox","checkboxes","name","key","label","CheckboxContainer","props","state","checkedItems","Map","location","handleChange","bind","e","item","target","isChecked","checked","console","log","locations","setState","prevState","includes","newLocations","size","entries","value","set","map","get","Component"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,IAAMC,UAAU,GAAG,CACf;AACIC,EAAAA,IAAI,EAAE,OADV;AAEIC,EAAAA,GAAG,EAAE,OAFT;AAGIC,EAAAA,KAAK,EAAE;AAHX,CADe,EAMf;AACIF,EAAAA,IAAI,EAAE,QADV;AAEIC,EAAAA,GAAG,EAAE,QAFT;AAGIC,EAAAA,KAAK,EAAE;AAHX,CANe,EAWf;AACIF,EAAAA,IAAI,EAAE,UADV;AAEIC,EAAAA,GAAG,EAAE,UAFT;AAGIC,EAAAA,KAAK,EAAE;AAHX,CAXe,CAAnB;;IAkBMC,iB;;;;;AACF,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,YAAY,EAAE,IAAIC,GAAJ,EADL;AAETC,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAKA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB;AARe;AASlB;;;;iCAEYC,C,EAAG;AACZ,UAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASb,IAAtB;AACA,UAAMc,SAAS,GAAGH,CAAC,CAACE,MAAF,CAASE,OAA3B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKZ,KAAjB;AACA,UAAIa,SAAJ;AACA,WAAKC,QAAL,CAAc,UAAAC,SAAS,EAAI;AAEtBF,QAAAA,SAAS,GAAGE,SAAS,CAACZ,QAAtB;;AAED,YAAIM,SAAJ,EAAe;AACX,cAAI,CAACI,SAAS,CAACG,QAAV,CAAmBT,IAAnB,CAAL,EAA+B;AAC3BM,YAAAA,SAAS,IAAIA,SAAS,KAAK,EAAd,GAAmBN,IAAnB,cAA8BA,IAA9B,CAAb;AACH;AACJ,SAJD,MAIO;AACH,cAAIM,SAAS,CAACG,QAAV,CAAmBT,IAAnB,CAAJ,EAA8B;AAC1B,gBAAIU,YAAY,GAAG,EAAnB;;AACA,gBAAIF,SAAS,CAACd,YAAV,CAAuBiB,IAAvB,GAA8B,CAAlC,EAAqC;AAAA,yDACNH,SAAS,CAACd,YAAV,CAAuBkB,OAAvB,EADM;AAAA;;AAAA;AACjC,oEAA6D;AAAA;AAAA,sBAAjDvB,GAAiD;AAAA,sBAA5CwB,KAA4C;;AACzD,sBAAIA,KAAK,IAAIH,YAAY,KAAK,EAA1B,IAAgCrB,GAAG,KAAKW,IAA5C,EAAkD;AAC9CU,oBAAAA,YAAY,IAAIrB,GAAhB;AACH,mBAFD,MAEO,IAAIwB,KAAJ,EAAW;AACdH,oBAAAA,YAAY,IAAIrB,GAAG,KAAKW,IAAR,GAAe,EAAf,cAAwBX,GAAxB,CAAhB;AAEH;AACJ;AARgC;AAAA;AAAA;AAAA;AAAA;AASpC;;AACDiB,YAAAA,SAAS,GAAGI,YAAZ;AACH;AACJ;;AACDN,QAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ;AACA,eAAO;AAAEZ,UAAAA,YAAY,EAAEc,SAAS,CAACd,YAAV,CAAuBoB,GAAvB,CAA2Bd,IAA3B,EAAiCE,SAAjC,CAAhB;AAA6DN,UAAAA,QAAQ,EAAEU;AAAvE,SAAP;AACH,OA1BD;AA4BH;;;6BAEQ;AAAA;;AACL,0BACI,QAAC,KAAD,CAAO,QAAP;AAAA,kBAEQnB,UAAU,CAAC4B,GAAX,CAAe,UAAAf,IAAI;AAAA,8BACf;AAAA,uBACKA,IAAI,CAACZ,IADV,eAEI,QAAC,QAAD;AAAU,cAAA,IAAI,EAAEY,IAAI,CAACZ,IAArB;AAA2B,cAAA,OAAO,EAAE,MAAI,CAACK,KAAL,CAAWC,YAAX,CAAwBsB,GAAxB,CAA4BhB,IAAI,CAACZ,IAAjC,CAApC;AAA4E,cAAA,QAAQ,EAAE,MAAI,CAACS;AAA3F;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA,aAAYG,IAAI,CAACX,GAAjB;AAAA;AAAA;AAAA;AAAA,oBADe;AAAA,SAAnB;AAFR;AAAA;AAAA;AAAA;AAAA,cADJ;AAYH;;;;EA5D2BL,KAAK,CAACiC,S;;AA+DtC,eAAe1B,iBAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Checkbox from './newcheckbox';\nconst checkboxes = [\n    {\n        name: 'Delhi',\n        key: 'Delhi',\n        label: 'Delhi',\n    },\n    {\n        name: 'Mumbai',\n        key: 'Mumbai',\n        label: 'Mumbai',\n    },\n    {\n        name: 'Banglore',\n        key: 'Banglore',\n        label: 'Banglore',\n    },\n];\n\nclass CheckboxContainer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            checkedItems: new Map(),\n            location: '',\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        const item = e.target.name;\n        const isChecked = e.target.checked;\n        console.log(this.state);\n        let locations ;\n        this.setState(prevState => {\n\n             locations = prevState.location;\n\n            if (isChecked) {\n                if (!locations.includes(item)) {\n                    locations += locations === '' ? item : `,${item}`;\n                }\n            } else {\n                if (locations.includes(item)) {\n                    let newLocations = '';\n                    if (prevState.checkedItems.size > 0) {\n                        for (const [key, value] of prevState.checkedItems.entries()) {\n                            if (value && newLocations === '' && key !== item) {\n                                newLocations += key;\n                            } else if (value) {\n                                newLocations += key === item ? '' : `,${key}`;\n\n                            }\n                        }\n                    }\n                    locations = newLocations;\n                }\n            }\n            console.log(locations);\n            return { checkedItems: prevState.checkedItems.set(item, isChecked), location: locations }\n        });\n\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {\n                    checkboxes.map(item => (\n                        <label key={item.key}>\n                            {item.name}\n                            <Checkbox name={item.name} checked={this.state.checkedItems.get(item.name)} onChange={this.handleChange} />\n                        </label>\n                    ))\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nexport default CheckboxContainer;"]},"metadata":{},"sourceType":"module"}