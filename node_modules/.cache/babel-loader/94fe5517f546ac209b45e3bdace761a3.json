{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\nfunction createData(id, randomSelection) {\n  return {\n    id,\n    name: \"Task 403 \".concat(randomSelection),\n    phone: '9000202161' + randomSelection,\n    email: 'abcd@gamil.com',\n    gender: 'male',\n    locations: 'hyd,abcd,acd'\n  };\n}\n\nfunction getData(num) {\n  var rows = [];\n\n  for (var i = 0; i < num; i += 1) {\n    var randomSelection = Math.floor(Math.random() * 10);\n    rows.push(createData(i, randomSelection));\n  }\n\n  return rows;\n}\n\nexport var tableSlice = createSlice({\n  name: 'tableData',\n  initialState: {\n    value: 0,\n    users: getData(200)\n  },\n  reducers: {\n    increment: function increment(state) {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: function decrement(state) {\n      state.value -= 1;\n    },\n    incrementByAmount: function incrementByAmount(state, action) {\n      state.value += action.payload;\n    },\n    removeUser: function removeUser(state, action) {\n      state.users = action.payload;\n    },\n    addUser: function addUser(state, action) {\n      state.users = action.payload;\n    }\n  }\n});\nvar _tableSlice$actions = tableSlice.actions,\n    increment = _tableSlice$actions.increment,\n    decrement = _tableSlice$actions.decrement,\n    incrementByAmount = _tableSlice$actions.incrementByAmount,\n    removeUser = _tableSlice$actions.removeUser,\n    addUser = _tableSlice$actions.addUser;\nexport { increment, decrement, incrementByAmount, removeUser, addUser };\nexport var selectCount = function selectCount(state) {\n  return state.tableData.value;\n};\nexport var selectUsers = function selectUsers(state) {\n  return state.tableData.users;\n};\nexport default tableSlice.reducer;","map":{"version":3,"sources":["/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/src/reducers/tableSlice.js"],"names":["createSlice","createData","id","randomSelection","name","phone","email","gender","locations","getData","num","rows","i","Math","floor","random","push","tableSlice","initialState","value","users","reducers","increment","state","decrement","incrementByAmount","action","payload","removeUser","addUser","actions","selectCount","tableData","selectUsers","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;;AAEA,SAASC,UAAT,CAAoBC,EAApB,EAAwBC,eAAxB,EAAyC;AACvC,SAAO;AAAED,IAAAA,EAAF;AAAME,IAAAA,IAAI,qBAAcD,eAAd,CAAV;AAA2CE,IAAAA,KAAK,EAAE,eAAeF,eAAjE;AAAkFG,IAAAA,KAAK,EAAE,gBAAzF;AAA2GC,IAAAA,MAAM,EAAE,MAAnH;AAA2HC,IAAAA,SAAS,EAAE;AAAtI,GAAP;AACD;;AAED,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,MAAMC,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,IAAI,CAA9B,EAAiC;AAC/B,QAAMT,eAAe,GAAGU,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAxB;AACAJ,IAAAA,IAAI,CAACK,IAAL,CAAUf,UAAU,CAACW,CAAD,EAAIT,eAAJ,CAApB;AACD;;AACD,SAAOQ,IAAP;AACD;;AAED,OAAO,IAAMM,UAAU,GAAGjB,WAAW,CAAC;AACpCI,EAAAA,IAAI,EAAE,WAD8B;AAEpCc,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,CADK;AAEZC,IAAAA,KAAK,EAAEX,OAAO,CAAC,GAAD;AAFF,GAFsB;AAMpCY,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,mBAAAC,KAAK,EAAI;AAClB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACJ,KAAN,IAAe,CAAf;AACD,KAPO;AAQRK,IAAAA,SAAS,EAAE,mBAAAD,KAAK,EAAI;AAClBA,MAAAA,KAAK,CAACJ,KAAN,IAAe,CAAf;AACD,KAVO;AAWRM,IAAAA,iBAAiB,EAAE,2BAACF,KAAD,EAAQG,MAAR,EAAmB;AACpCH,MAAAA,KAAK,CAACJ,KAAN,IAAeO,MAAM,CAACC,OAAtB;AACD,KAbO;AAcRC,IAAAA,UAAU,EAAE,oBAACL,KAAD,EAAQG,MAAR,EAAmB;AAC7BH,MAAAA,KAAK,CAACH,KAAN,GAAcM,MAAM,CAACC,OAArB;AACD,KAhBO;AAiBRE,IAAAA,OAAO,EAAG,iBAACN,KAAD,EAAQG,MAAR,EAAmB;AAC3BH,MAAAA,KAAK,CAACH,KAAN,GAAcM,MAAM,CAACC,OAArB;AACD;AAnBO;AAN0B,CAAD,CAA9B;0BA8BwEV,UAAU,CAACa,O;IAA3ER,S,uBAAAA,S;IAAWE,S,uBAAAA,S;IAAWC,iB,uBAAAA,iB;IAAmBG,U,uBAAAA,U;IAAWC,O,uBAAAA,O;;AAEnE,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAAAR,KAAK;AAAA,SAAIA,KAAK,CAACS,SAAN,CAAgBb,KAApB;AAAA,CAAzB;AACP,OAAO,IAAMc,WAAW,GAAG,SAAdA,WAAc,CAAAV,KAAK;AAAA,SAAIA,KAAK,CAACS,SAAN,CAAgBZ,KAApB;AAAA,CAAzB;AACP,eAAeH,UAAU,CAACiB,OAA1B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nfunction createData(id, randomSelection) {\n  return { id, name: `Task 403 ${randomSelection}`, phone: '9000202161' + randomSelection, email: 'abcd@gamil.com', gender: 'male', locations: 'hyd,abcd,acd' };\n}\n\nfunction getData(num) {\n  const rows = [];\n  for (let i = 0; i < num; i += 1) {\n    const randomSelection = Math.floor(Math.random() * 10);\n    rows.push(createData(i, randomSelection));\n  }\n  return rows;\n}\n\nexport const tableSlice = createSlice({\n  name: 'tableData',\n  initialState: {\n    value: 0,\n    users: getData(200),\n  },\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: state => {\n      state.value -= 1\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload\n    },\n    removeUser: (state, action) => {\n      state.users = action.payload;\n    },\n    addUser : (state, action) => {\n      state.users = action.payload;\n    },\n    \n  }\n})\n\nexport const { increment, decrement, incrementByAmount, removeUser,addUser } = tableSlice.actions;\n\nexport const selectCount = state => state.tableData.value\nexport const selectUsers = state => state.tableData.users\nexport default tableSlice.reducer;"]},"metadata":{},"sourceType":"module"}