{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/src/components/CheckBoxContainer.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Checkbox from '../components/CheckBox';\nimport { checkboxes } from '../utils/constants';\n\nvar CheckboxContainer = /*#__PURE__*/function (_React$Component) {\n  _inherits(CheckboxContainer, _React$Component);\n\n  var _super = _createSuper(CheckboxContainer);\n\n  function CheckboxContainer(props) {\n    var _this;\n\n    _classCallCheck(this, CheckboxContainer);\n\n    _this = _super.call(this, props);\n\n    _this.getUpdateLocation = function (item, isChecked) {\n      var locations = _this.state.location;\n\n      if (isChecked) {\n        if (!locations.includes(item)) {\n          locations += locations === '' ? item : \",\".concat(item);\n        }\n      } else {\n        if (locations.includes(item)) {\n          var newLocations = '';\n\n          if (_this.state.checkedItems.size > 0) {\n            var _iterator = _createForOfIteratorHelper(_this.state.checkedItems.entries()),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var _step$value = _slicedToArray(_step.value, 2),\n                    key = _step$value[0],\n                    value = _step$value[1];\n\n                if (value && newLocations === '' && key !== item) {\n                  newLocations += key;\n                } else if (value) {\n                  newLocations += key === item ? '' : \",\".concat(key);\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          }\n\n          locations = newLocations;\n        }\n      }\n\n      return locations;\n    };\n\n    _this.handleChange = function (e) {\n      var item = e.target.name;\n      var isChecked = e.target.checked;\n      console.log(_this.state);\n\n      var locations = _this.getUpdateLocation(item, isChecked);\n\n      _this.setState(function (prevState) {\n        return {\n          checkedItems: prevState.checkedItems.set(item, isChecked),\n          location: locations\n        };\n      });\n\n      _this.props.handleChange({\n        target: {\n          name: 'locations',\n          value: locations,\n          type: 'locations'\n        }\n      });\n    };\n\n    _this.state = {\n      checkedItems: new Map(),\n      location: ''\n    }; // this.handleChange = this.handleChange.bind(this);\n\n    return _this;\n  }\n\n  _createClass(CheckboxContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: checkboxes.map(function (item) {\n          return /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [item.name, /*#__PURE__*/_jsxDEV(Checkbox, {\n              name: item.name,\n              checked: _this2.state.checkedItems.get(item.name),\n              onChange: _this2.handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }, _this2)]\n          }, item.key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, _this2);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return CheckboxContainer;\n}(React.Component);\n\nexport default CheckboxContainer;","map":{"version":3,"sources":["/Users/vamshisaggurthi/Dev/Kaki project/proje/nikhil_27dec20/src/components/CheckBoxContainer.js"],"names":["React","PropTypes","Checkbox","checkboxes","CheckboxContainer","props","getUpdateLocation","item","isChecked","locations","state","location","includes","newLocations","checkedItems","size","entries","key","value","handleChange","e","target","name","checked","console","log","setState","prevState","set","type","Map","map","get","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Checkbox from '../components/CheckBox';\n\nimport { checkboxes } from '../utils/constants';\n\nclass CheckboxContainer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            checkedItems: new Map(),\n            location: '',\n        }\n\n        // this.handleChange = this.handleChange.bind(this);\n    }\n    getUpdateLocation = (item, isChecked) => {\n        let locations = this.state.location;\n\n        if (isChecked) {\n            if (!locations.includes(item)) {\n                locations += locations === '' ? item : `,${item}`;\n            }\n        } else {\n            if (locations.includes(item)) {\n                let newLocations = '';\n                if (this.state.checkedItems.size > 0) {\n                    for (const [key, value] of this.state.checkedItems.entries()) {\n                        if (value && newLocations === '' && key !== item) {\n                            newLocations += key;\n                        } else if (value) {\n                            newLocations += key === item ? '' : `,${key}`;\n\n                        }\n                    }\n                }\n                locations = newLocations;\n            }\n        }\n        return locations\n    }\n    handleChange = (e) => {\n        const item = e.target.name;\n        const isChecked = e.target.checked;\n        console.log(this.state);\n        const locations = this.getUpdateLocation(item, isChecked);\n\n\n        this.setState(prevState => {\n            return { checkedItems: prevState.checkedItems.set(item, isChecked), location: locations }\n        });\n        this.props.handleChange({ target: { name: 'locations', value: locations, type: 'locations' } })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {\n                    checkboxes.map(item => (\n                        <label key={item.key}>\n                            {item.name}\n                            <Checkbox name={item.name} checked={this.state.checkedItems.get(item.name)} onChange={this.handleChange} />\n                        </label>\n                    ))\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nexport default CheckboxContainer;"]},"metadata":{},"sourceType":"module"}